version: 117
description: Return unique tasks from get_claimed_tasks_by_task_queue_id
methods:
  get_claimed_tasks_by_task_queue_id:
    description: |-
      Get all tasks that are currently claimed by workers in a given task queue.
      Returns only the latest claim for each unique task ID to avoid duplicates
      when tasks are being reclaimed.
    mode: read
    serviceName: queue
    args: task_queue_id_in text, page_size_in integer, after_claimed_in timestamptz, after_task_id_in text
    returns: |-
      table (
        task_id text,
        task_queue_id text,
        scheduler_id text,
        project_id text,
        task_group_id text,
        dependencies jsonb,
        requires task_requires,
        routes jsonb,
        priority task_priority,
        retries integer,
        retries_left int,
        created timestamptz,
        deadline timestamptz,
        expires timestamptz,
        scopes jsonb,
        payload jsonb,
        metadata jsonb,
        tags jsonb,
        extra jsonb,
        runs jsonb,
        taken_until timestamptz,
        run_id integer,
        worker_group text,
        worker_id text,
        claimed timestamptz
      )
    body: |-
      begin
        return query
        select
          tasks.task_id,
          tasks.task_queue_id,
          tasks.scheduler_id,
          coalesce(tasks.project_id, 'none') as project_id,
          tasks.task_group_id,
          tasks.dependencies,
          tasks.requires,
          tasks.routes,
          tasks.priority,
          tasks.retries,
          tasks.retries_left,
          tasks.created,
          tasks.deadline,
          tasks.expires,
          tasks.scopes,
          tasks.payload,
          tasks.metadata,
          tasks.tags,
          tasks.extra,
          tasks.runs,
          tasks.taken_until,
          -- for pagination and results
          q.run_id,
          q.worker_group,
          q.worker_id,
          q.claimed
        from queue_claimed_tasks q
        inner join tasks on tasks.task_id = q.task_id
        where q.task_queue_id = task_queue_id_in
          and (after_claimed_in is null or q.claimed > after_claimed_in)
          and (after_task_id_in is null or q.task_id != after_task_id_in)
          and not exists (
            select 1
            from queue_claimed_tasks q2
            where q2.task_id = q.task_id
              and q2.task_queue_id = q.task_queue_id
              and q2.claimed > q.claimed
          )
        order by q.claimed asc
        limit get_page_limit(page_size_in);
      end
